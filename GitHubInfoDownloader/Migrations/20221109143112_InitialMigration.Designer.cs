// <auto-generated />
using System;
using GitHubInfoDownloader.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitHubInfoDownloader.Migrations
{
    [DbContext(typeof(GitGetterContext))]
    [Migration("20221109143112_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GitHubInfoDownloader.Models.Commit", b =>
                {
                    b.Property<string>("sha")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("committerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("repoId")
                        .HasColumnType("int");

                    b.HasKey("sha");

                    b.HasIndex("committerId");

                    b.HasIndex("repoId");

                    b.ToTable("commits");
                });

            modelBuilder.Entity("GitHubInfoDownloader.Models.GitUser", b =>
                {
                    b.Property<int>("gituserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("gituserId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("gituserId");

                    b.ToTable("gitusers");
                });

            modelBuilder.Entity("GitHubInfoDownloader.Models.Repo", b =>
                {
                    b.Property<int>("repoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("repoId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ownerId")
                        .HasColumnType("int");

                    b.HasKey("repoId");

                    b.HasIndex("ownerId");

                    b.ToTable("repos");
                });

            modelBuilder.Entity("GitHubInfoDownloader.Models.Commit", b =>
                {
                    b.HasOne("GitHubInfoDownloader.Models.GitUser", "committer")
                        .WithMany("commits")
                        .HasForeignKey("committerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GitHubInfoDownloader.Models.Repo", "repo")
                        .WithMany()
                        .HasForeignKey("repoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("committer");

                    b.Navigation("repo");
                });

            modelBuilder.Entity("GitHubInfoDownloader.Models.Repo", b =>
                {
                    b.HasOne("GitHubInfoDownloader.Models.GitUser", "owner")
                        .WithMany("repos")
                        .HasForeignKey("ownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");
                });

            modelBuilder.Entity("GitHubInfoDownloader.Models.GitUser", b =>
                {
                    b.Navigation("commits");

                    b.Navigation("repos");
                });
#pragma warning restore 612, 618
        }
    }
}
